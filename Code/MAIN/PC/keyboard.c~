/**
@author Gianluca Savaia
*/

#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/select.h>
#include <termios.h>

#include "keyboard.h"
#include "../interface/hamming.h"

int kbhit()
{
    struct timeval tv = { 0L, 0L };
    fd_set fds;
    FD_ZERO(&fds);
    FD_SET(0, &fds);
    return select(1, &fds, NULL, NULL, &tv);
}

inline void open_keyboard(struct termios* oldTerminalSettings, struct termios* newTerminalSettings)
{
    tcgetattr(0, oldTerminalSettings);

    *newTerminalSettings = *oldTerminalSettings;

    newTerminalSettings->c_lflag &= (~ICANON & ~ECHO); //dont wait for enter, dont print to terminal

    tcsetattr(0, TCSANOW, newTerminalSettings);

    //setvbuf(stdin, NULL, _IONBF, 8); //turn off buffering
}

inline void close_keyboard(struct termios* oldTerminalSettings)
{
    tcsetattr(0, TCSANOW, oldTerminalSettings);
}

char getchar_keyboard()
{
    //char ch = getchar();
    char ch;
    int c;

    if(kbhit())
    {
        ch = getchar();
    }

    printf("%d ", ch);

    if( ch == ESC )
    {
        ch = getchar();
        printf("%d ", ch);

        if( ch == ESC )
        {
            printf("\n");
            return ESC;
        }
        if( ch != 91 )
        {
            printf("\n");
            return INVALID;
        }

        ch = getchar();
        printf("\n");

        switch(ch)
        {
            case ARROW_U:
                return ARROW_U;
            case ARROW_D:
                return ARROW_D;
            case ARROW_L:
                return ARROW_L;
            case ARROW_R:
                return ARROW_R;
            default:
                return INVALID;
        };
    }

    printf("\n");

    return ch;
}

packet_t encapsulate(char command)
{
    packet_t outgoing;

    switch(command)
    {
        case ESC:
            outgoing.header     = STOP;
            outgoing.command    = EMPTY;
            break;

        /* MODES */
        case ZERO:
            outgoing.header     = SET_MODE;
            outgoing.command    = SAFE_MODE;
            break;
        case ONE:
            outgoing.header     = SET_MODE;
            outgoing.command    = PANIC_MODE;
            break;
        case TWO:
            outgoing.header     = SET_MODE;
            outgoing.command    = MANUAL_MODE;
            break;
        case THREE:
            outgoing.header     = SET_MODE;
            outgoing.command    = CALIBRATION_MODE;
            break;
        case FOUR:
            outgoing.header     = SET_MODE;
            outgoing.command    = YAW_MODE;
            break;
        case FIVE:
            outgoing.header     = SET_MODE;
            outgoing.command    = FULL_MODE;
            break;
        case SEVEN:
            outgoing.header     = LOG;
            outgoing.command    = LOG_START;
            break;
        case EIGHT:
            outgoing.header     = LOG;
            outgoing.command    = LOG_STOP;
            break;
        case NINE:
            outgoing.header     = LOG;
            outgoing.command    = LOG_GET;
            break;

        /* MANUAL CONTROL */
        case A:
            outgoing.header     = D_LIFT;
            outgoing.command    = INCREASE;
            break;
        case Z:
            outgoing.header     = D_LIFT;
            outgoing.command    = DECREASE;
            break;
        case Q:
            outgoing.header     = D_YAWRATE;
            outgoing.command    = DECREASE;
            break;
        case W:
            outgoing.header     = D_YAWRATE;
            outgoing.command    = INCREASE;
            break;
        case ARROW_U:
            outgoing.header     = D_PITCH;
            outgoing.command    = DECREASE;
            break;
        case ARROW_D:
            outgoing.header     = D_PITCH;
            outgoing.command    = INCREASE;
            break;
        case ARROW_R:
            outgoing.header     = D_ROLL;
            outgoing.command    = DECREASE;
            break;
        case ARROW_L:
            outgoing.header     = D_ROLL;
            outgoing.command    = INCREASE;
            break;

        /* CONTROLLER SETTINGS */
        case Y:
            outgoing.header     = SET_SCALE_LIFT;
            outgoing.command    = INCREASE;
            break;
        case H:
            outgoing.header     = SET_SCALE_LIFT;
            outgoing.command    = DECREASE;
            break;
        case U:
            outgoing.header     = SET_SCALE_PITCH;
            outgoing.command    = INCREASE;
            break;
        case J:
            outgoing.header     = SET_SCALE_PITCH;
            outgoing.command    = DECREASE;
            break;
        case I:
            outgoing.header     = SET_SCALE_ROLL;
            outgoing.command    = INCREASE;
            break;
        case K:
            outgoing.header     = SET_SCALE_ROLL;
            outgoing.command    = DECREASE;
            break;
        case O:
            outgoing.header     = SET_SCALE_YAW;
            outgoing.command    = INCREASE;
            break;
        case L:
            outgoing.header     = SET_SCALE_YAW;
            outgoing.command    = DECREASE;
            break;

        /* NOT RECOGNIZED */
        default:
            outgoing.header     = EMPTY;
            outgoing.command    = EMPTY;
            break;
    };

    compute_hamming(&outgoing);

    return outgoing;
}
